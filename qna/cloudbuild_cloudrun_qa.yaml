substitutions:
  _IMAGE_NAME: your-image-name
  _SERVICE_NAME: your-service-name
  _REGION: your-region
  _GCS_BUCKET: your-gcs-bucket
  _SERVICE_ACCOUNT: your-service@your-project.iam.gserviceaccount.com

steps:
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    secretEnv: ["OPENAI_API_KEY", "SUPABASE_URL", "SUPABASE_KEY", "DB_CONNECTION_STRING", "GIT_PAT"]
    args:
    - '-c'
    - |
      cat <<EOF >Dockerfile_cloudrun
      FROM gcr.io/$PROJECT_ID/prebuild/${_IMAGE_NAME}

      COPY . .

      RUN pip install -r qna/requirements.txt

      EXPOSE 8080
      ENV SUPABASE_URL=$$SUPABASE_URL
      ENV SUPABASE_KEY=$$SUPABASE_KEY
      ENV OPENAI_API_KEY=$$OPENAI_API_KEY
      ENV GCS_BUCKET=${_GCS_BUCKET}
      ENV DB_CONNECTION_STRING=$$DB_CONNECTION_STRING
      ENV GIT_PAT=$$GIT_PAT

      RUN python -c "from transformers import AutoModel, AutoTokenizer; AutoTokenizer.from_pretrained('bert-base-uncased'); AutoModel.from_pretrained('bert-base-uncased')"
      RUN python -c "from transformers import GPT2TokenizerFast; GPT2TokenizerFast.from_pretrained('gpt2')"

      CMD ["python", "qna/app.py"]
      EOF

  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}/qna', '-f', 'Dockerfile_cloudrun', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}/qna']

  # Deploy the image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy cloud run
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud run deploy ${_SERVICE_NAME} --image gcr.io/$PROJECT_ID/${_IMAGE_NAME}/qna \
           --region ${_REGION} \
           --platform managed \
           --allow-unauthenticated \
           --memory 2Gi \
           --cpu 1 \
           --max-instances 2 \
           --service-account ${_SERVICE_ACCOUNT}

  # Get service URL
  - name: "gcr.io/cloud-builders/gcloud"
    id: get service url for qna
    entrypoint: bash
    args:
      - "-c"
      - |
        echo $(gcloud run services describe ${_SERVICE_NAME} --region ${_REGION} --format 'value(status.url)') \
          > service_urlqna.txt && cat service_urlqna.txt

  # Update the service with SERVICE_URL environment variable
  - name: "gcr.io/cloud-builders/gcloud"
    id: update service qna
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud run services update ${_SERVICE_NAME} --region ${_REGION} \
          --update-env-vars=QNA_URL=$(cat service_urlqna.txt)

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/OPENAI_API_KEY/versions/latest
    env: OPENAI_API_KEY
  - versionName: projects/$PROJECT_ID/secrets/SUPABASE_URL/versions/latest
    env: SUPABASE_URL
  - versionName: projects/$PROJECT_ID/secrets/SUPABASE_KEY/versions/latest
    env: SUPABASE_KEY
  - versionName: projects/$PROJECT_ID/secrets/DB_CONNECTION_STRING/versions/latest
    env: DB_CONNECTION_STRING
  - versionName: projects/$PROJECT_ID/secrets/gitpython_PAT/versions/latest
    env: GIT_PAT
